buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'idea'
apply plugin: 'com.neenbedankt.android-apt'

def appVersionCode = 1
def appVersionName = "0.1"
def appVersionDesc = "alpha"
def appReleaseDesc = "WhatsUp-cn" + appVersionCode + '-v' + appVersionName + '-' + appVersionDesc + '.apk'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        applicationId "org.highway.whatsup"
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode appVersionCode
        versionName appVersionName
        multiDexEnabled true
    }
    signingConfigs {
        release {
            storeFile file("../keystore/kabbler.jks")
            storePassword "kabb_key_pass"
            keyAlias "kabbler_app"
            keyPassword "kabbler_app_key_pass"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        production{}
        qa {
            applicationId "org.highway.qa"
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions {
        jumboMode true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project (':domain')

    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.android.support:design:23.0.0'
    compile "com.android.support:recyclerview-v7:23.0.0"
    compile "com.google.android.gms:play-services-analytics:${playServiceVersion}"
    compile "com.google.android.gms:play-services-identity:${playServiceVersion}"
    compile "com.google.android.gms:play-services-gcm:${playServiceVersion}"
    compile "com.google.android.gms:play-services-location:${playServiceVersion}"
    compile "com.google.android.gms:play-services-maps:${playServiceVersion}"
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.jakewharton:butterknife:7.0.+'

    compile 'com.orhanobut:logger:1.+'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'

    // common libraries
    compile "info.android15.nucleus:nucleus:${nucleusVersion}"
    compile "info.android15.nucleus:nucleus-support-v4:${nucleusVersion}"
    compile "info.android15.nucleus:nucleus-support-v7:${nucleusVersion}"

    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    provided "org.glassfish:javax.annotation:${javaxAnnotationVersion}"

    compile "com.squareup:otto:${ottoBusVersion}"

    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "com.squareup.okhttp:mockwebserver:${okHttpVersion}"
}

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

def srcfolder = 'build/outputs/apk/'
def dstfolder = System.getProperty("user.home") + "/Downloads" + "/kabbler"

task copyRelease(type: Copy) {
    from srcfolder
    into dstfolder
    include 'app-production-release.apk'
    rename ('app-production-release.apk', appReleaseDesc)
}

task copyDebug(type: Copy) {
    from srcfolder
    into dstfolder
    include 'app-qa-debug.apk'
    rename ('app-qa-debug.apk', 'qa_' + appReleaseDesc)
}

copyRelease.mustRunAfter assembleRelease
task releaseDeploy(dependsOn: [assembleRelease, copyRelease]) {}

copyDebug.mustRunAfter assembleQa
task debugDeploy(dependsOn: [assembleQa, copyDebug]) {}

task deploy(dependsOn: [releaseDeploy, debugDeploy]) {}