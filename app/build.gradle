buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'idea'
apply plugin: 'com.neenbedankt.android-apt'

def appVersionCode = 1
def appVersionName = "0.1"
def appVersionDesc = "alpha"
def appReleaseDesc = "WhatsUp-cn" + appVersionCode + '-v' + appVersionName + '-' + appVersionDesc + '.apk'
def appMinSdkVersion = 15
def appTargetSdkVersion = 22

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.0 rc3"

    defaultConfig {
        applicationId "org.highway.whatsup"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
    }
    signingConfigs {
        release {
            storeFile file("../buildsystem/whatsup_keystore.jks")
            storePassword "whatsup!!"
            keyAlias "org.highway.whatsup"
            keyPassword "whatsup!!"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        production{}
        qa {
            applicationId "com.whatsup.qa"
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions {
        jumboMode true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(":domain")

    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
    compile 'com.google.android.gms:play-services-analytics:7.5.0'
    compile 'com.google.android.gms:play-services-identity:7.5.0'
    compile 'com.google.android.gms:play-services-gcm:7.5.0'
    compile 'com.google.android.gms:play-services-location:7.5.0'
    compile 'com.google.android.gms:play-services-maps:7.5.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.jakewharton:butterknife:7.0.+'
    compile 'com.squareup:otto:1.3.8'

    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'

    // common libraries
    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    provided "org.glassfish:javax.annotation:${javaxAnnotationVersion}"

    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "com.squareup.okhttp:mockwebserver:${okHttpVersion}"
}

def srcfolder = 'build/outputs/apk/'
def dstfolder = System.getProperty("user.home") + "/Downloads" + "/WhatsUp"

task copyRelease(type: Copy) {
    from srcfolder
    into dstfolder
    include 'app-production-release.apk'
    rename ('app-production-release.apk', appReleaseDesc)
}

task copyDebug(type: Copy) {
    from srcfolder
    into dstfolder
    include 'app-qa-debug.apk'
    rename ('app-qa-debug.apk', 'qa_' + appReleaseDesc)
}

copyRelease.mustRunAfter assembleRelease
task releaseDeploy(dependsOn: [assembleRelease, copyRelease]) {}

copyDebug.mustRunAfter assembleQa
task debugDeploy(dependsOn: [assembleQa, copyDebug]) {}

task deploy(dependsOn: [releaseDeploy, debugDeploy]) {}